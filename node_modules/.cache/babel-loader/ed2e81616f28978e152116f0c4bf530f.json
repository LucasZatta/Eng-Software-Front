{"ast":null,"code":"import { ofType } from \"redux-observable\";\nimport { of } from \"rxjs\";\nimport { catchError, concatMap, map } from \"rxjs/operators\";\nimport { UserActions } from \"./actions\";\nimport { getUserMe, postUser } from \"./service\";\nconst aa = {\n  name: values.Nome,\n  cpf: values.Cpf,\n  phone: values.Telefone,\n  email: values.Email,\n  password: values.password,\n  type: [user_type.OWNER, user_type.RENTER]\n};\n\nconst getUserMeByCpf = cpf => {\n  return getUserMe(cpf).then(response => {\n    console.log(response);\n    return UserActions.getUserMeSuccess(response);\n  }, catchError(error => {\n    console.log(error);\n    return of(UserActions.getUserMeFailure(error));\n  }));\n};\n\nexport const handleGetUserMe = action$ => action$.pipe(ofType(\"GET_USER_ME\"), map(action => action.payload), concatMap(payload => getUserMeByCpf(payload)));\n\nconst registerUser = user => {\n  return postUser(user).pipe(map(response => {\n    console.log(response);\n    return UserActions.getUserMeSuccess(response);\n  }), catchError(error => {\n    console.log(error);\n    return of(UserActions.getUserMeFailure(error));\n  }));\n};\n\nexport const handleRegisterUser = action$ => action$.pipe(ofType(\"REGISTER_USER\"), map(action => action.payload), concatMap(newUser => registerUser(newUser)));","map":{"version":3,"sources":["C:/Users/lucas.zatta/Documents/Eng-Software-Front/src/redux/user/epics.ts"],"names":["ofType","of","catchError","concatMap","map","UserActions","getUserMe","postUser","aa","name","values","Nome","cpf","Cpf","phone","Telefone","email","Email","password","type","user_type","OWNER","RENTER","getUserMeByCpf","then","response","console","log","getUserMeSuccess","error","getUserMeFailure","handleGetUserMe","action$","pipe","action","payload","registerUser","user","handleRegisterUser","newUser"],"mappings":"AACA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAAgBC,EAAhB,QAA0B,MAA1B;AACA,SACEC,UADF,EAEEC,SAFF,EAIEC,GAJF,QAMO,gBANP;AAOA,SAASC,WAAT,QAA4B,WAA5B;AAEA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,WAApC;AAEA,MAAMC,EAAE,GAAG;AACTC,EAAAA,IAAI,EAAEC,MAAM,CAACC,IADJ;AAETC,EAAAA,GAAG,EAAEF,MAAM,CAACG,GAFH;AAGTC,EAAAA,KAAK,EAAEJ,MAAM,CAACK,QAHL;AAITC,EAAAA,KAAK,EAAEN,MAAM,CAACO,KAJL;AAKTC,EAAAA,QAAQ,EAAER,MAAM,CAACQ,QALR;AAMTC,EAAAA,IAAI,EAAE,CAACC,SAAS,CAACC,KAAX,EAAkBD,SAAS,CAACE,MAA5B;AANG,CAAX;;AAaA,MAAMC,cAAc,GAAIX,GAAD,IAAiB;AACtC,SAAON,SAAS,CAACM,GAAD,CAAT,CAAeY,IAAf,CACJC,QAAD,IAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,WAAOpB,WAAW,CAACuB,gBAAZ,CAA6BH,QAA7B,CAAP;AACD,GAJI,EAKLvB,UAAU,CAAE2B,KAAD,IAAW;AACpBH,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACA,WAAO5B,EAAE,CAACI,WAAW,CAACyB,gBAAZ,CAA6BD,KAA7B,CAAD,CAAT;AACD,GAHS,CALL,CAAP;AAUD,CAXD;;AAaA,OAAO,MAAME,eAAe,GAAIC,OAAD,IAC7BA,OAAO,CAACC,IAAR,CACEjC,MAAM,CAAC,aAAD,CADR,EAEEI,GAAG,CAAE8B,MAAD,IAA4BA,MAAM,CAACC,OAApC,CAFL,EAGEhC,SAAS,CAAEgC,OAAD,IAAqBZ,cAAc,CAACY,OAAD,CAApC,CAHX,CADK;;AAOP,MAAMC,YAAY,GAAIC,IAAD,IAAgB;AACnC,SAAO9B,QAAQ,CAAC8B,IAAD,CAAR,CAAeJ,IAAf,CACL7B,GAAG,CAAEqB,QAAD,IAAoB;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,WAAOpB,WAAW,CAACuB,gBAAZ,CAA6BH,QAA7B,CAAP;AACD,GAHE,CADE,EAKLvB,UAAU,CAAE2B,KAAD,IAAW;AACpBH,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACA,WAAO5B,EAAE,CAACI,WAAW,CAACyB,gBAAZ,CAA6BD,KAA7B,CAAD,CAAT;AACD,GAHS,CALL,CAAP;AAUD,CAXD;;AAaA,OAAO,MAAMS,kBAAkB,GAAIN,OAAD,IAChCA,OAAO,CAACC,IAAR,CACEjC,MAAM,CAAC,eAAD,CADR,EAEEI,GAAG,CAAE8B,MAAD,IAA4BA,MAAM,CAACC,OAApC,CAFL,EAGEhC,SAAS,CAAEoC,OAAD,IAAmBH,YAAY,CAACG,OAAD,CAAhC,CAHX,CADK","sourcesContent":["import { notification } from \"antd\";\r\nimport { ofType } from \"redux-observable\";\r\nimport { merge, of } from \"rxjs\";\r\nimport {\r\n  catchError,\r\n  concatMap,\r\n  delay,\r\n  map,\r\n  withLatestFrom,\r\n} from \"rxjs/operators\";\r\nimport { UserActions } from \"./actions\";\r\nimport { User } from \"./models\";\r\nimport { getUserMe, postUser } from \"./service\";\r\n\r\nconst aa = {\r\n  name: values.Nome,\r\n  cpf: values.Cpf,\r\n  phone: values.Telefone,\r\n  email: values.Email,\r\n  password: values.password,\r\n  type: [user_type.OWNER, user_type.RENTER],\r\n};\r\nexport interface Action<T = undefined> {\r\n  type: string;\r\n  payload?: T;\r\n}\r\n\r\nconst getUserMeByCpf = (cpf: string) => {\r\n  return getUserMe(cpf).then(\r\n    (response) => {\r\n      console.log(response);\r\n      return UserActions.getUserMeSuccess(response);\r\n    },\r\n    catchError((error) => {\r\n      console.log(error);\r\n      return of(UserActions.getUserMeFailure(error));\r\n    })\r\n  );\r\n};\r\n\r\nexport const handleGetUserMe = (action$: any) =>\r\n  action$.pipe(\r\n    ofType(\"GET_USER_ME\"),\r\n    map((action: Action<object>) => action.payload),\r\n    concatMap((payload: string) => getUserMeByCpf(payload))\r\n  );\r\n\r\nconst registerUser = (user: User) => {\r\n  return postUser(user).pipe(\r\n    map((response: User) => {\r\n      console.log(response);\r\n      return UserActions.getUserMeSuccess(response);\r\n    }),\r\n    catchError((error) => {\r\n      console.log(error);\r\n      return of(UserActions.getUserMeFailure(error));\r\n    })\r\n  );\r\n};\r\n\r\nexport const handleRegisterUser = (action$: any) =>\r\n  action$.pipe(\r\n    ofType(\"REGISTER_USER\"),\r\n    map((action: Action<object>) => action.payload),\r\n    concatMap((newUser: User) => registerUser(newUser))\r\n  );\r\n"]},"metadata":{},"sourceType":"module"}