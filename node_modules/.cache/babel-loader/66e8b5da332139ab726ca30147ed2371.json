{"ast":null,"code":"import { ofType } from \"redux-observable\";\nimport { of } from \"rxjs\";\nimport { catchError, concatMap, map } from \"rxjs/operators\";\nimport { UserActions } from \"./actions\";\nimport { user_type } from \"./models\";\nimport { getUserMe, postUser } from \"./service\";\nconst aa = {\n  name: \"camilla\",\n  cpf: \"08015456681\",\n  phone: \"319999999\",\n  email: \"camilla@g.com\",\n  password: \"12234\",\n  type: [user_type.OWNER, user_type.RENTER]\n};\n\nconst getUserMeByCpf = cpf => {\n  return getUserMe(cpf).then(response => {\n    console.log(response);\n    return UserActions.getUserMeSuccess(aa);\n  }, catchError(error => {\n    console.log(error);\n    return of(UserActions.getUserMeFailure(error));\n  }));\n};\n\nexport const handleGetUserMe = action$ => action$.pipe(ofType(\"GET_USER_ME\"), map(action => action.payload), concatMap(payload => getUserMeByCpf(payload)));\n\nconst registerUser = async user => {\n  try {\n    const response = await postUser(user);\n    console.log(response);\n    return UserActions.getUserMeSuccess(aa);\n  } catch (error) {\n    console.log(error);\n    return of(UserActions.getUserMeFailure(error));\n  }\n};\n\nexport const handleRegisterUser = action$ => action$.pipe(ofType(\"REGISTER_USER\"), map(action => action.payload), concatMap(newUser => registerUser(newUser)));","map":{"version":3,"sources":["C:/Users/lucas.zatta/Documents/Eng-Software-Front/src/redux/user/epics.ts"],"names":["ofType","of","catchError","concatMap","map","UserActions","user_type","getUserMe","postUser","aa","name","cpf","phone","email","password","type","OWNER","RENTER","getUserMeByCpf","then","response","console","log","getUserMeSuccess","error","getUserMeFailure","handleGetUserMe","action$","pipe","action","payload","registerUser","user","handleRegisterUser","newUser"],"mappings":"AACA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAAgBC,EAAhB,QAA0B,MAA1B;AACA,SACEC,UADF,EAEEC,SAFF,EAIEC,GAJF,QAMO,gBANP;AAOA,SAASC,WAAT,QAA4B,WAA5B;AACA,SAAeC,SAAf,QAAgC,UAAhC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,WAApC;AAEA,MAAMC,EAAE,GAAG;AACTC,EAAAA,IAAI,EAAE,SADG;AAETC,EAAAA,GAAG,EAAE,aAFI;AAGTC,EAAAA,KAAK,EAAE,WAHE;AAITC,EAAAA,KAAK,EAAE,eAJE;AAKTC,EAAAA,QAAQ,EAAE,OALD;AAMTC,EAAAA,IAAI,EAAE,CAACT,SAAS,CAACU,KAAX,EAAkBV,SAAS,CAACW,MAA5B;AANG,CAAX;;AAaA,MAAMC,cAAc,GAAIP,GAAD,IAAiB;AACtC,SAAOJ,SAAS,CAACI,GAAD,CAAT,CAAeQ,IAAf,CACJC,QAAD,IAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,WAAOf,WAAW,CAACkB,gBAAZ,CAA6Bd,EAA7B,CAAP;AACD,GAJI,EAKLP,UAAU,CAAEsB,KAAD,IAAW;AACpBH,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACA,WAAOvB,EAAE,CAACI,WAAW,CAACoB,gBAAZ,CAA6BD,KAA7B,CAAD,CAAT;AACD,GAHS,CALL,CAAP;AAUD,CAXD;;AAaA,OAAO,MAAME,eAAe,GAAIC,OAAD,IAC7BA,OAAO,CAACC,IAAR,CACE5B,MAAM,CAAC,aAAD,CADR,EAEEI,GAAG,CAAEyB,MAAD,IAA4BA,MAAM,CAACC,OAApC,CAFL,EAGE3B,SAAS,CAAE2B,OAAD,IAAqBZ,cAAc,CAACY,OAAD,CAApC,CAHX,CADK;;AAOP,MAAMC,YAAY,GAAG,MAAOC,IAAP,IAAsB;AACzC,MAAI;AACF,UAAMZ,QAAQ,GAAG,MAAMZ,QAAQ,CAACwB,IAAD,CAA/B;AACAX,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,WAAOf,WAAW,CAACkB,gBAAZ,CAA6Bd,EAA7B,CAAP;AACD,GAJD,CAIE,OAAOe,KAAP,EAAc;AACdH,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACA,WAAOvB,EAAE,CAACI,WAAW,CAACoB,gBAAZ,CAA6BD,KAA7B,CAAD,CAAT;AACD;AACF,CATD;;AAWA,OAAO,MAAMS,kBAAkB,GAAIN,OAAD,IAChCA,OAAO,CAACC,IAAR,CACE5B,MAAM,CAAC,eAAD,CADR,EAEEI,GAAG,CAAEyB,MAAD,IAA4BA,MAAM,CAACC,OAApC,CAFL,EAGE3B,SAAS,CAAE+B,OAAD,IAAmBH,YAAY,CAACG,OAAD,CAAhC,CAHX,CADK","sourcesContent":["import { notification } from \"antd\";\r\nimport { ofType } from \"redux-observable\";\r\nimport { merge, of } from \"rxjs\";\r\nimport {\r\n  catchError,\r\n  concatMap,\r\n  delay,\r\n  map,\r\n  withLatestFrom,\r\n} from \"rxjs/operators\";\r\nimport { UserActions } from \"./actions\";\r\nimport { User, user_type } from \"./models\";\r\nimport { getUserMe, postUser } from \"./service\";\r\n\r\nconst aa = {\r\n  name: \"camilla\",\r\n  cpf: \"08015456681\",\r\n  phone: \"319999999\",\r\n  email: \"camilla@g.com\",\r\n  password: \"12234\",\r\n  type: [user_type.OWNER, user_type.RENTER],\r\n};\r\nexport interface Action<T = undefined> {\r\n  type: string;\r\n  payload?: T;\r\n}\r\n\r\nconst getUserMeByCpf = (cpf: string) => {\r\n  return getUserMe(cpf).then(\r\n    (response) => {\r\n      console.log(response);\r\n      return UserActions.getUserMeSuccess(aa);\r\n    },\r\n    catchError((error) => {\r\n      console.log(error);\r\n      return of(UserActions.getUserMeFailure(error));\r\n    })\r\n  );\r\n};\r\n\r\nexport const handleGetUserMe = (action$: any) =>\r\n  action$.pipe(\r\n    ofType(\"GET_USER_ME\"),\r\n    map((action: Action<object>) => action.payload),\r\n    concatMap((payload: string) => getUserMeByCpf(payload))\r\n  );\r\n\r\nconst registerUser = async (user: User) => {\r\n  try {\r\n    const response = await postUser(user);\r\n    console.log(response);\r\n    return UserActions.getUserMeSuccess(aa);\r\n  } catch (error) {\r\n    console.log(error);\r\n    return of(UserActions.getUserMeFailure(error));\r\n  }\r\n};\r\n\r\nexport const handleRegisterUser = (action$: any) =>\r\n  action$.pipe(\r\n    ofType(\"REGISTER_USER\"),\r\n    map((action: Action<object>) => action.payload),\r\n    concatMap((newUser: User) => registerUser(newUser))\r\n  );\r\n"]},"metadata":{},"sourceType":"module"}